//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OneStopServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://wmgateway.gov.bc.ca/WSConnectors.BCPartner:receiveFromPartner", ConfigurationName="OneStopServiceReference.receiveFromPartner_PortType")]
    public interface receiveFromPartner_PortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="WSConnectors_BCPartner_receiveFromPartner_Binder_receiveFromPartner", ReplyAction="*")]
        System.Threading.Tasks.Task<OneStopServiceReference.receiveFromPartnerResponse> receiveFromPartnerAsync(OneStopServiceReference.receiveFromPartnerRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="receiveFromPartnerInput", WrapperNamespace="https://wmgateway.gov.bc.ca/WSConnectors.BCPartner:receiveFromPartner", IsWrapped=true)]
    public partial class receiveFromPartnerRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string inputXML;
        
        public receiveFromPartnerRequest()
        {
        }
        
        public receiveFromPartnerRequest(string inputXML)
        {
            this.inputXML = inputXML;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="receiveFromPartnerOutput", WrapperNamespace="https://wmgateway.gov.bc.ca/WSConnectors.BCPartner:receiveFromPartner", IsWrapped=true)]
    public partial class receiveFromPartnerResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string outputXML;
        
        public receiveFromPartnerResponse()
        {
        }
        
        public receiveFromPartnerResponse(string outputXML)
        {
            this.outputXML = outputXML;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface receiveFromPartner_PortTypeChannel : OneStopServiceReference.receiveFromPartner_PortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class receiveFromPartner_PortTypeClient : System.ServiceModel.ClientBase<OneStopServiceReference.receiveFromPartner_PortType>, OneStopServiceReference.receiveFromPartner_PortType
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public receiveFromPartner_PortTypeClient() : 
                base(receiveFromPartner_PortTypeClient.GetDefaultBinding(), receiveFromPartner_PortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSConnectors_BCPartner_receiveFromPartner_Port.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public receiveFromPartner_PortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(receiveFromPartner_PortTypeClient.GetBindingForEndpoint(endpointConfiguration), receiveFromPartner_PortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public receiveFromPartner_PortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(receiveFromPartner_PortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public receiveFromPartner_PortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(receiveFromPartner_PortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public receiveFromPartner_PortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OneStopServiceReference.receiveFromPartnerResponse> OneStopServiceReference.receiveFromPartner_PortType.receiveFromPartnerAsync(OneStopServiceReference.receiveFromPartnerRequest request)
        {
            return base.Channel.receiveFromPartnerAsync(request);
        }
        
        public System.Threading.Tasks.Task<OneStopServiceReference.receiveFromPartnerResponse> receiveFromPartnerAsync(string inputXML)
        {
            OneStopServiceReference.receiveFromPartnerRequest inValue = new OneStopServiceReference.receiveFromPartnerRequest();
            inValue.inputXML = inputXML;
            return ((OneStopServiceReference.receiveFromPartner_PortType)(this)).receiveFromPartnerAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSConnectors_BCPartner_receiveFromPartner_Port))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSConnectors_BCPartner_receiveFromPartner_Port))
            {
                return new System.ServiceModel.EndpointAddress("https://twmgateway.gov.bc.ca:5443/ws/WSConnectors.BCPartner.receiveFromPartner/WS" +
                        "Connectors_BCPartner_receiveFromPartner_Port");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return receiveFromPartner_PortTypeClient.GetBindingForEndpoint(EndpointConfiguration.WSConnectors_BCPartner_receiveFromPartner_Port);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return receiveFromPartner_PortTypeClient.GetEndpointAddress(EndpointConfiguration.WSConnectors_BCPartner_receiveFromPartner_Port);
        }
        
        public enum EndpointConfiguration
        {
            
            WSConnectors_BCPartner_receiveFromPartner_Port,
        }
    }
}
