// The builds.

node('master') {
    stage('Startup') {
        if (changeset("cllc-public-app/ClientApp/*")) {
                sh 'oc cancel-build bc/cllc-public-angular'                
            }
        if (changeset("cllc-public-app/*")) {
                sh 'oc cancel-build bc/cllc-public-api'        
        }
    }

    stage('Build') {
        parallel('Angular': {

            if (changeset("cllc-public-app/ClientApp/*")) {
                openshiftBuild bldCfg: 'cllc-public-angular', showBuildLogs: 'true', waitTime: 1800000
            }
        }, 'C# API': {
            if (changeset("cllc-public-app/*")) {
                openshiftBuild bldCfg: 'cllc-public-api', showBuildLogs: 'true', waitTime: 1800000
                openshiftTag destStream: 'cllc-public-api', verbose: 'true', destTag: 'dev', srcStream: 'cllc-public-api', srcTag: 'latest'
            }
        })

        echo "Building Application image..."
        openshiftBuild bldCfg: 'cllc-public-frontend', showBuildLogs: 'true', waitTime: 1800000
        openshiftTag destStream: 'cllc-public-frontend', verbose: 'true', destTag: 'dev', srcStream: 'cllc-public-frontend', srcTag: 'latest'
    }
}

/*
// ZAP security scan

podTemplate(label: 'owasp-zap2', name: 'owasp-zap2', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
    containerTemplate(
        name: 'jnlp',
        image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
        resourceRequestCpu: '500m',
        resourceLimitCpu: '1000m',
        resourceRequestMemory: '3Gi',
        resourceLimitMemory: '4Gi',
        workingDir: '/home/jenkins',
        command: '',
        args: '${computer.jnlpmac} ${computer.name}'
    )
]) {
    stage('ZAP Security Scan') {
        node('owasp-zap2') {
            //the checkout is mandatory
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm

            dir('/zap') {
                def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://cannabis-licensing-dev.pathfinder.bcgov'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                echo "Return value is: ${retVal}"

            }
        }
    }
}
*/

podTemplate(label: 'agent-dotnet', name: 'agent-dotnet', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
    containerTemplate(
        name: 'jnlp',
        image: '172.50.0.2:5000/yuumcs-tools/agent-dotnet',
        resourceRequestCpu: '1000m',
        resourceLimitCpu: '1500m',
        resourceRequestMemory: '4Gi',
        resourceLimitMemory: '6Gi',
        workingDir: '/home/jenkins',
        command: '',
        args: '${computer.jnlpmac} ${computer.name}'
    )
]) {

    stage('Scan') {
	  parallel('SonarQube':{
        node('master') {
            echo "Running SonarQube static code analysis..."
            sh 'oc cancel-build bc/cllc-public-sonar'
            openshiftBuild bldCfg: 'cllc-public-sonar', showBuildLogs: 'true', waitTime: 1800000
        }
    },'Smoke Test':
	{
		node('agent-dotnet') {
            //the checkout is mandatory
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm

            dir('functional-tests/smoke-tests') {               
                withEnv(["baseUri=${baseUri}","test_start=${test_start}","test_start_worker=${test_start_worker}","test_cc=${test_cc}","test_ccv=${test_ccv}","CHROME_BINARY_LOCATION=${CHROME_BINARY_LOCATION}"])
                {
                    try {                        
                        sh 'dotnet test --logger "junit;LogFilePath=functionalResults.xml"'					
                    }
                    catch (err)
                    {
                        echo "Error encountered:"
                        echo err.getMessage()
                    }
                    finally {
                        junit 'functionalResults.xml'
                    }					
                }            
            }
        }
	})
	}
}

        /*
        node('nodejs') 
            {
                
                /*
                //the checkout is mandatory, otherwise the functional test would fail
                echo "checking out source"
                echo "Build: ${BUILD_ID}"
                checkout scm
                dir('cllc-public-app/ClientApp') {
                try {
                    // sh 'Xvfb :1 -screen 0 1024x768x24 &'
                    // sh 'export DISPLAY=:1'
                    sh 'npm install'
                    sh 'npm run test-headless'
                }                         
                finally {

                    archiveArtifacts allowEmptyArchive: true, artifacts: '*.xml'
                    junit 'junit.xml'
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'unit-tests.html',
                        reportName: "Unit Test Report"
                    ]) 
                        
                }                    
            }
        }
        */
