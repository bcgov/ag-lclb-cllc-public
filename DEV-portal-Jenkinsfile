// The builds.

node('master') {
    stage('Startup') {
        if (changeset("cllc-public-app/ClientApp/*")) {
                sh 'oc cancel-build bc/cllc-public-angular'                
            }
        if (changeset("cllc-public-app/*")) {
                sh 'oc cancel-build bc/cllc-public-api'        
        }
    }

    stage('Build') {
        parallel('Angular': {

            if (changeset("cllc-public-app/ClientApp/*")) {
                openshiftBuild bldCfg: 'cllc-public-angular', showBuildLogs: 'true'
            }
        }, 'C# API': {
            if (changeset("cllc-public-app/*")) {
                openshiftBuild bldCfg: 'cllc-public-api', showBuildLogs: 'true'
            }
        })

        echo "Building Application image..."
        openshiftBuild bldCfg: 'cllc-public-frontend', showBuildLogs: 'true'
        openshiftTag destStream: 'cllc-public-frontend', verbose: 'true', destTag: 'dev', srcStream: 'cllc-public-frontend', srcTag: 'latest'
    }
}


// ZAP security scan

podTemplate(label: 'owasp-zap2', name: 'owasp-zap2', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
    containerTemplate(
        name: 'jnlp',
        image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
        resourceRequestCpu: '500m',
        resourceLimitCpu: '1000m',
        resourceRequestMemory: '3Gi',
        resourceLimitMemory: '4Gi',
        workingDir: '/home/jenkins',
        command: '',
        args: '${computer.jnlpmac} ${computer.name}'
    )
]) {
    stage('ZAP Security Scan') {
        node('owasp-zap2') {
            //the checkout is mandatory
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm

            dir('/zap') {
                def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://cannabis-licensing-dev.pathfinder.bcgov'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                echo "Return value is: ${retVal}"

            }
        }
    }
}
stage('Automated Tests and code analysis') {

    parallel('SonarQube Scan': {
            node('master') {
                echo "Running SonarQube static code analysis..."
                sh 'oc cancel-build bc/cllc-public-sonar'
                openshiftBuild bldCfg: 'cllc-public-sonar', showBuildLogs: 'true'
            }
        }, 'Angular': {
            node('nodejs') 
                {
                    //the checkout is mandatory, otherwise functional test would fail
                    echo "checking out source"
                    echo "Build: ${BUILD_ID}"
                    checkout scm
                    dir('cllc-public-app/ClientApp') {
                        try {
                            // sh 'Xvfb :1 -screen 0 1024x768x24 &'
                            // sh 'export DISPLAY=:1'
                            sh 'npm install -g @angular/cli'
                            sh 'npm install'
                            sh 'npm run test-headless'
                        } finally {
                            archiveArtifacts allowEmptyArchive: true, artifacts: '*.xml'
                            junit 'junit.xml'
                            publishHTML(target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: '.',
                                reportFiles: 'unit-tests.html',
                                reportName: "Unit Test Report"
                            ])
                        }
                    }
                }
            }
    )
}