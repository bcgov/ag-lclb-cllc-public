// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Accountsaccountid.
    /// </summary>
    public static partial class AccountsaccountidExtensions
    {
            /// <summary>
            /// Delete entity from accounts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountid'>
            /// key: accountid
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            public static void Deleteentityfromaccounts(this IAccountsaccountid operations, string accountid, string ifMatch = default(string))
            {
                operations.DeleteentityfromaccountsAsync(accountid, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete entity from accounts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountid'>
            /// key: accountid
            /// </param>
            /// <param name='ifMatch'>
            /// ETag
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteentityfromaccountsAsync(this IAccountsaccountid operations, string accountid, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteentityfromaccountsWithHttpMessagesAsync(accountid, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get entity from accounts by key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountid'>
            /// key: accountid
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            public static MicrosoftDynamicsCRMaccount Getentityfromaccountsbykey(this IAccountsaccountid operations, string accountid, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>))
            {
                return operations.GetentityfromaccountsbykeyAsync(accountid, select, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get entity from accounts by key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountid'>
            /// key: accountid
            /// </param>
            /// <param name='select'>
            /// Select properties to be returned
            /// </param>
            /// <param name='expand'>
            /// Expand related entities
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MicrosoftDynamicsCRMaccount> GetentityfromaccountsbykeyAsync(this IAccountsaccountid operations, string accountid, IList<string> select = default(IList<string>), IList<string> expand = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetentityfromaccountsbykeyWithHttpMessagesAsync(accountid, select, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update entity in accounts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountid'>
            /// key: accountid
            /// </param>
            /// <param name='body'>
            /// New property values
            /// </param>
            public static void Updateentityinaccounts(this IAccountsaccountid operations, string accountid, MicrosoftDynamicsCRMaccount body)
            {
                operations.UpdateentityinaccountsAsync(accountid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update entity in accounts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountid'>
            /// key: accountid
            /// </param>
            /// <param name='body'>
            /// New property values
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateentityinaccountsAsync(this IAccountsaccountid operations, string accountid, MicrosoftDynamicsCRMaccount body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateentityinaccountsWithHttpMessagesAsync(accountid, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
