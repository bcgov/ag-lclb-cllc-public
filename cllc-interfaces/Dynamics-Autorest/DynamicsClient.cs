// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// This OData service is located at http://localhost
    /// </summary>
    public partial class DynamicsClient : ServiceClient<DynamicsClient>, IDynamicsClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Show only the first n items
        /// </summary>
        public int? Top { get; set; }

        /// <summary>
        /// Skip the first n items
        /// </summary>
        public int? Skip { get; set; }

        /// <summary>
        /// Include count of items
        /// </summary>
        public bool? Count { get; set; }

        /// <summary>
        /// Filter items by property values
        /// </summary>
        public string Filter { get; set; }

        /// <summary>
        /// Search items by search phrases
        /// </summary>
        public string Search { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IAccounts.
        /// </summary>
        public virtual IAccounts Accounts { get; private set; }

        /// <summary>
        /// Gets the IAdoxioadoxiolicencetypeadoxioinvestigationset.
        /// </summary>
        public virtual IAdoxioadoxiolicencetypeadoxioinvestigationset Adoxioadoxiolicencetypeadoxioinvestigationset { get; private set; }

        /// <summary>
        /// Gets the IAdoxioaliases.
        /// </summary>
        public virtual IAdoxioaliases Adoxioaliases { get; private set; }

        /// <summary>
        /// Gets the IAdoxioapplicationbpfmvpv2s.
        /// </summary>
        public virtual IAdoxioapplicationbpfmvpv2s Adoxioapplicationbpfmvpv2s { get; private set; }

        /// <summary>
        /// Gets the IAdoxioapplicationbpfv3s.
        /// </summary>
        public virtual IAdoxioapplicationbpfv3s Adoxioapplicationbpfv3s { get; private set; }

        /// <summary>
        /// Gets the IAdoxioapplicationinvoicehistories.
        /// </summary>
        public virtual IAdoxioapplicationinvoicehistories Adoxioapplicationinvoicehistories { get; private set; }

        /// <summary>
        /// Gets the IAdoxioapplications.
        /// </summary>
        public virtual IAdoxioapplications Adoxioapplications { get; private set; }

        /// <summary>
        /// Gets the IAdoxioapplicationtermsconditionslimitations.
        /// </summary>
        public virtual IAdoxioapplicationtermsconditionslimitations Adoxioapplicationtermsconditionslimitations { get; private set; }

        /// <summary>
        /// Gets the IAdoxioapplicationtypecontents.
        /// </summary>
        public virtual IAdoxioapplicationtypecontents Adoxioapplicationtypecontents { get; private set; }

        /// <summary>
        /// Gets the IAdoxioapplicationtypes.
        /// </summary>
        public virtual IAdoxioapplicationtypes Adoxioapplicationtypes { get; private set; }

        /// <summary>
        /// Gets the IAdoxioareas.
        /// </summary>
        public virtual IAdoxioareas Adoxioareas { get; private set; }

        /// <summary>
        /// Gets the IAdoxioauditlogrequests.
        /// </summary>
        public virtual IAdoxioauditlogrequests Adoxioauditlogrequests { get; private set; }

        /// <summary>
        /// Gets the IAdoxiobusinessaccounts.
        /// </summary>
        public virtual IAdoxiobusinessaccounts Adoxiobusinessaccounts { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocannabisinventoryreports.
        /// </summary>
        public virtual IAdoxiocannabisinventoryreports Adoxiocannabisinventoryreports { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocannabismonthlyreports.
        /// </summary>
        public virtual IAdoxiocannabismonthlyreports Adoxiocannabismonthlyreports { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocannabisproductadmins.
        /// </summary>
        public virtual IAdoxiocannabisproductadmins Adoxiocannabisproductadmins { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocitydistricts.
        /// </summary>
        public virtual IAdoxiocitydistricts Adoxiocitydistricts { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocomplaintpublicbpfs.
        /// </summary>
        public virtual IAdoxiocomplaintpublicbpfs Adoxiocomplaintpublicbpfs { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocomplaints.
        /// </summary>
        public virtual IAdoxiocomplaints Adoxiocomplaints { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocomplianceinvestigations.
        /// </summary>
        public virtual IAdoxiocomplianceinvestigations Adoxiocomplianceinvestigations { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocompliancemeetings.
        /// </summary>
        public virtual IAdoxiocompliancemeetings Adoxiocompliancemeetings { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocontraventionadmins.
        /// </summary>
        public virtual IAdoxiocontraventionadmins Adoxiocontraventionadmins { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocontraventions.
        /// </summary>
        public virtual IAdoxiocontraventions Adoxiocontraventions { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocorporatehistorysummaries.
        /// </summary>
        public virtual IAdoxiocorporatehistorysummaries Adoxiocorporatehistorysummaries { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocorporateroles.
        /// </summary>
        public virtual IAdoxiocorporateroles Adoxiocorporateroles { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocustomautonumberdefinitions.
        /// </summary>
        public virtual IAdoxiocustomautonumberdefinitions Adoxiocustomautonumberdefinitions { get; private set; }

        /// <summary>
        /// Gets the IAdoxiocustomautonumberrequests.
        /// </summary>
        public virtual IAdoxiocustomautonumberrequests Adoxiocustomautonumberrequests { get; private set; }

        /// <summary>
        /// Gets the IAdoxiodocumentadmins.
        /// </summary>
        public virtual IAdoxiodocumentadmins Adoxiodocumentadmins { get; private set; }

        /// <summary>
        /// Gets the IAdoxiodocuments.
        /// </summary>
        public virtual IAdoxiodocuments Adoxiodocuments { get; private set; }

        /// <summary>
        /// Gets the IAdoxioestablishments.
        /// </summary>
        public virtual IAdoxioestablishments Adoxioestablishments { get; private set; }

        /// <summary>
        /// Gets the IAdoxioestablishmentwatchwords.
        /// </summary>
        public virtual IAdoxioestablishmentwatchwords Adoxioestablishmentwatchwords { get; private set; }

        /// <summary>
        /// Gets the IAdoxiofiainvestigationlogs.
        /// </summary>
        public virtual IAdoxiofiainvestigationlogs Adoxiofiainvestigationlogs { get; private set; }

        /// <summary>
        /// Gets the IAdoxiofundingsources.
        /// </summary>
        public virtual IAdoxiofundingsources Adoxiofundingsources { get; private set; }

        /// <summary>
        /// Gets the IAdoxioincidentadoxiolicencetypeset.
        /// </summary>
        public virtual IAdoxioincidentadoxiolicencetypeset Adoxioincidentadoxiolicencetypeset { get; private set; }

        /// <summary>
        /// Gets the IAdoxioinspectioninspectorsset.
        /// </summary>
        public virtual IAdoxioinspectioninspectorsset Adoxioinspectioninspectorsset { get; private set; }

        /// <summary>
        /// Gets the IAdoxioinspectionreactivationhistories.
        /// </summary>
        public virtual IAdoxioinspectionreactivationhistories Adoxioinspectionreactivationhistories { get; private set; }

        /// <summary>
        /// Gets the IAdoxioinspectorcommentsrollups.
        /// </summary>
        public virtual IAdoxioinspectorcommentsrollups Adoxioinspectorcommentsrollups { get; private set; }

        /// <summary>
        /// Gets the IAdoxiointerests.
        /// </summary>
        public virtual IAdoxiointerests Adoxiointerests { get; private set; }

        /// <summary>
        /// Gets the IAdoxioinvestigationactivities.
        /// </summary>
        public virtual IAdoxioinvestigationactivities Adoxioinvestigationactivities { get; private set; }

        /// <summary>
        /// Gets the IAdoxioinvestigationreactivationhistories.
        /// </summary>
        public virtual IAdoxioinvestigationreactivationhistories Adoxioinvestigationreactivationhistories { get; private set; }

        /// <summary>
        /// Gets the IAdoxioinvestigations.
        /// </summary>
        public virtual IAdoxioinvestigations Adoxioinvestigations { get; private set; }

        /// <summary>
        /// Gets the IAdoxiolegalentities.
        /// </summary>
        public virtual IAdoxiolegalentities Adoxiolegalentities { get; private set; }

        /// <summary>
        /// Gets the IAdoxiolicenceses.
        /// </summary>
        public virtual IAdoxiolicenceses Adoxiolicenceses { get; private set; }

        /// <summary>
        /// Gets the IAdoxiolicencetypes.
        /// </summary>
        public virtual IAdoxiolicencetypes Adoxiolicencetypes { get; private set; }

        /// <summary>
        /// Gets the IAdoxiolicencetypesapplicationtypesset.
        /// </summary>
        public virtual IAdoxiolicencetypesapplicationtypesset Adoxiolicencetypesapplicationtypesset { get; private set; }

        /// <summary>
        /// Gets the IAdoxiolicenseechangelogs.
        /// </summary>
        public virtual IAdoxiolicenseechangelogs Adoxiolicenseechangelogs { get; private set; }

        /// <summary>
        /// Gets the IAdoxioloans.
        /// </summary>
        public virtual IAdoxioloans Adoxioloans { get; private set; }

        /// <summary>
        /// Gets the IAdoxiolocalgovindigenousnations.
        /// </summary>
        public virtual IAdoxiolocalgovindigenousnations Adoxiolocalgovindigenousnations { get; private set; }

        /// <summary>
        /// Gets the IAdoxiopersonalhistorysummaries.
        /// </summary>
        public virtual IAdoxiopersonalhistorysummaries Adoxiopersonalhistorysummaries { get; private set; }

        /// <summary>
        /// Gets the IAdoxiopolicejurisdictions.
        /// </summary>
        public virtual IAdoxiopolicejurisdictions Adoxiopolicejurisdictions { get; private set; }

        /// <summary>
        /// Gets the IAdoxiopolicydocuments.
        /// </summary>
        public virtual IAdoxiopolicydocuments Adoxiopolicydocuments { get; private set; }

        /// <summary>
        /// Gets the IAdoxiopostalcodes.
        /// </summary>
        public virtual IAdoxiopostalcodes Adoxiopostalcodes { get; private set; }

        /// <summary>
        /// Gets the IAdoxiopreviousaddresses.
        /// </summary>
        public virtual IAdoxiopreviousaddresses Adoxiopreviousaddresses { get; private set; }

        /// <summary>
        /// Gets the IAdoxioregions.
        /// </summary>
        public virtual IAdoxioregions Adoxioregions { get; private set; }

        /// <summary>
        /// Gets the IAdoxiorelatedparties.
        /// </summary>
        public virtual IAdoxiorelatedparties Adoxiorelatedparties { get; private set; }

        /// <summary>
        /// Gets the IAdoxiosettings.
        /// </summary>
        public virtual IAdoxiosettings Adoxiosettings { get; private set; }

        /// <summary>
        /// Gets the IAdoxiospddatarows.
        /// </summary>
        public virtual IAdoxiospddatarows Adoxiospddatarows { get; private set; }

        /// <summary>
        /// Gets the IAdoxiospdexportses.
        /// </summary>
        public virtual IAdoxiospdexportses Adoxiospdexportses { get; private set; }

        /// <summary>
        /// Gets the IAdoxiotaxandaccountings.
        /// </summary>
        public virtual IAdoxiotaxandaccountings Adoxiotaxandaccountings { get; private set; }

        /// <summary>
        /// Gets the IAdoxiotermsconditionslimitationspresets.
        /// </summary>
        public virtual IAdoxiotermsconditionslimitationspresets Adoxiotermsconditionslimitationspresets { get; private set; }

        /// <summary>
        /// Gets the IAdoxioterritories.
        /// </summary>
        public virtual IAdoxioterritories Adoxioterritories { get; private set; }

        /// <summary>
        /// Gets the IAdoxiotiedhouseassociations.
        /// </summary>
        public virtual IAdoxiotiedhouseassociations Adoxiotiedhouseassociations { get; private set; }

        /// <summary>
        /// Gets the IAdoxiotiedhouseconnections.
        /// </summary>
        public virtual IAdoxiotiedhouseconnections Adoxiotiedhouseconnections { get; private set; }

        /// <summary>
        /// Gets the IAdoxiowitnesses.
        /// </summary>
        public virtual IAdoxiowitnesses Adoxiowitnesses { get; private set; }

        /// <summary>
        /// Gets the IAdoxioworkerinvoicehistories.
        /// </summary>
        public virtual IAdoxioworkerinvoicehistories Adoxioworkerinvoicehistories { get; private set; }

        /// <summary>
        /// Gets the IAdoxioworkers.
        /// </summary>
        public virtual IAdoxioworkers Adoxioworkers { get; private set; }

        /// <summary>
        /// Gets the IContacts.
        /// </summary>
        public virtual IContacts Contacts { get; private set; }

        /// <summary>
        /// Gets the IEntitydefinitions.
        /// </summary>
        public virtual IEntitydefinitions Entitydefinitions { get; private set; }

        /// <summary>
        /// Gets the IGlobaloptionsetdefinitions.
        /// </summary>
        public virtual IGlobaloptionsetdefinitions Globaloptionsetdefinitions { get; private set; }

        /// <summary>
        /// Gets the IInvoices.
        /// </summary>
        public virtual IInvoices Invoices { get; private set; }

        /// <summary>
        /// Gets the ISavedqueries.
        /// </summary>
        public virtual ISavedqueries Savedqueries { get; private set; }

        /// <summary>
        /// Gets the ISharepointdocumentlocations.
        /// </summary>
        public virtual ISharepointdocumentlocations Sharepointdocumentlocations { get; private set; }

        /// <summary>
        /// Gets the ISharepointsites.
        /// </summary>
        public virtual ISharepointsites Sharepointsites { get; private set; }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        protected DynamicsClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Accounts = new Accounts(this);
            Adoxioadoxiolicencetypeadoxioinvestigationset = new Adoxioadoxiolicencetypeadoxioinvestigationset(this);
            Adoxioaliases = new Adoxioaliases(this);
            Adoxioapplicationbpfmvpv2s = new Adoxioapplicationbpfmvpv2s(this);
            Adoxioapplicationbpfv3s = new Adoxioapplicationbpfv3s(this);
            Adoxioapplicationinvoicehistories = new Adoxioapplicationinvoicehistories(this);
            Adoxioapplications = new Adoxioapplications(this);
            Adoxioapplicationtermsconditionslimitations = new Adoxioapplicationtermsconditionslimitations(this);
            Adoxioapplicationtypecontents = new Adoxioapplicationtypecontents(this);
            Adoxioapplicationtypes = new Adoxioapplicationtypes(this);
            Adoxioareas = new Adoxioareas(this);
            Adoxioauditlogrequests = new Adoxioauditlogrequests(this);
            Adoxiobusinessaccounts = new Adoxiobusinessaccounts(this);
            Adoxiocannabisinventoryreports = new Adoxiocannabisinventoryreports(this);
            Adoxiocannabismonthlyreports = new Adoxiocannabismonthlyreports(this);
            Adoxiocannabisproductadmins = new Adoxiocannabisproductadmins(this);
            Adoxiocitydistricts = new Adoxiocitydistricts(this);
            Adoxiocomplaintpublicbpfs = new Adoxiocomplaintpublicbpfs(this);
            Adoxiocomplaints = new Adoxiocomplaints(this);
            Adoxiocomplianceinvestigations = new Adoxiocomplianceinvestigations(this);
            Adoxiocompliancemeetings = new Adoxiocompliancemeetings(this);
            Adoxiocontraventionadmins = new Adoxiocontraventionadmins(this);
            Adoxiocontraventions = new Adoxiocontraventions(this);
            Adoxiocorporatehistorysummaries = new Adoxiocorporatehistorysummaries(this);
            Adoxiocorporateroles = new Adoxiocorporateroles(this);
            Adoxiocustomautonumberdefinitions = new Adoxiocustomautonumberdefinitions(this);
            Adoxiocustomautonumberrequests = new Adoxiocustomautonumberrequests(this);
            Adoxiodocumentadmins = new Adoxiodocumentadmins(this);
            Adoxiodocuments = new Adoxiodocuments(this);
            Adoxioestablishments = new Adoxioestablishments(this);
            Adoxioestablishmentwatchwords = new Adoxioestablishmentwatchwords(this);
            Adoxiofiainvestigationlogs = new Adoxiofiainvestigationlogs(this);
            Adoxiofundingsources = new Adoxiofundingsources(this);
            Adoxioincidentadoxiolicencetypeset = new Adoxioincidentadoxiolicencetypeset(this);
            Adoxioinspectioninspectorsset = new Adoxioinspectioninspectorsset(this);
            Adoxioinspectionreactivationhistories = new Adoxioinspectionreactivationhistories(this);
            Adoxioinspectorcommentsrollups = new Adoxioinspectorcommentsrollups(this);
            Adoxiointerests = new Adoxiointerests(this);
            Adoxioinvestigationactivities = new Adoxioinvestigationactivities(this);
            Adoxioinvestigationreactivationhistories = new Adoxioinvestigationreactivationhistories(this);
            Adoxioinvestigations = new Adoxioinvestigations(this);
            Adoxiolegalentities = new Adoxiolegalentities(this);
            Adoxiolicenceses = new Adoxiolicenceses(this);
            Adoxiolicencetypes = new Adoxiolicencetypes(this);
            Adoxiolicencetypesapplicationtypesset = new Adoxiolicencetypesapplicationtypesset(this);
            Adoxiolicenseechangelogs = new Adoxiolicenseechangelogs(this);
            Adoxioloans = new Adoxioloans(this);
            Adoxiolocalgovindigenousnations = new Adoxiolocalgovindigenousnations(this);
            Adoxiopersonalhistorysummaries = new Adoxiopersonalhistorysummaries(this);
            Adoxiopolicejurisdictions = new Adoxiopolicejurisdictions(this);
            Adoxiopolicydocuments = new Adoxiopolicydocuments(this);
            Adoxiopostalcodes = new Adoxiopostalcodes(this);
            Adoxiopreviousaddresses = new Adoxiopreviousaddresses(this);
            Adoxioregions = new Adoxioregions(this);
            Adoxiorelatedparties = new Adoxiorelatedparties(this);
            Adoxiosettings = new Adoxiosettings(this);
            Adoxiospddatarows = new Adoxiospddatarows(this);
            Adoxiospdexportses = new Adoxiospdexportses(this);
            Adoxiotaxandaccountings = new Adoxiotaxandaccountings(this);
            Adoxiotermsconditionslimitationspresets = new Adoxiotermsconditionslimitationspresets(this);
            Adoxioterritories = new Adoxioterritories(this);
            Adoxiotiedhouseassociations = new Adoxiotiedhouseassociations(this);
            Adoxiotiedhouseconnections = new Adoxiotiedhouseconnections(this);
            Adoxiowitnesses = new Adoxiowitnesses(this);
            Adoxioworkerinvoicehistories = new Adoxioworkerinvoicehistories(this);
            Adoxioworkers = new Adoxioworkers(this);
            Contacts = new Contacts(this);
            Entitydefinitions = new Entitydefinitions(this);
            Globaloptionsetdefinitions = new Globaloptionsetdefinitions(this);
            Invoices = new Invoices(this);
            Savedqueries = new Savedqueries(this);
            Sharepointdocumentlocations = new Sharepointdocumentlocations(this);
            Sharepointsites = new Sharepointsites(this);
            BaseUri = new System.Uri("http://localhost");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
