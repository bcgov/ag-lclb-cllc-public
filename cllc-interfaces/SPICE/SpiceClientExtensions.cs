// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces.Spice
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SpiceClient.
    /// </summary>
    public static partial class SpiceClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requests'>
            /// </param>
            public static void ReceiveApplicationScreenings(this ISpiceClient operations, IList<IncompleteApplicationScreening> requests = default(IList<IncompleteApplicationScreening>))
            {
                operations.ReceiveApplicationScreeningsAsync(requests).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requests'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReceiveApplicationScreeningsAsync(this ISpiceClient operations, IList<IncompleteApplicationScreening> requests = default(IList<IncompleteApplicationScreening>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReceiveApplicationScreeningsWithHttpMessagesAsync(requests, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requests'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse ReceiveApplicationScreeningsWithHttpMessages(this ISpiceClient operations, IList<IncompleteApplicationScreening> requests = default(IList<IncompleteApplicationScreening>), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.ReceiveApplicationScreeningsWithHttpMessagesAsync(requests, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secret'>
            /// </param>
            public static string GetToken(this ISpiceClient operations, string secret = default(string))
            {
                return operations.GetTokenAsync(secret).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secret'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetTokenAsync(this ISpiceClient operations, string secret = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTokenWithHttpMessagesAsync(secret, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secret'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<string> GetTokenWithHttpMessages(this ISpiceClient operations, string secret = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetTokenWithHttpMessagesAsync(secret, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requests'>
            /// </param>
            public static void ReceiveWorkerScreenings(this ISpiceClient operations, IList<IncompleteWorkerScreening> requests = default(IList<IncompleteWorkerScreening>))
            {
                operations.ReceiveWorkerScreeningsAsync(requests).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requests'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReceiveWorkerScreeningsAsync(this ISpiceClient operations, IList<IncompleteWorkerScreening> requests = default(IList<IncompleteWorkerScreening>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReceiveWorkerScreeningsWithHttpMessagesAsync(requests, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requests'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse ReceiveWorkerScreeningsWithHttpMessages(this ISpiceClient operations, IList<IncompleteWorkerScreening> requests = default(IList<IncompleteWorkerScreening>), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.ReceiveWorkerScreeningsWithHttpMessagesAsync(requests, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
