// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Search.
    /// </summary>
    public static partial class SearchExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// A query
            /// </param>
            public static AutocompleteOKResponse Autocomplete(this ISearch operations, string q = default(string))
            {
                return operations.AutocompleteAsync(q).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// A query
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AutocompleteOKResponse> AutocompleteAsync(this ISearch operations, string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AutocompleteWithHttpMessagesAsync(q, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// We want facet_counts from the less-restricted queryset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ordering'>
            /// Which field to use when ordering the results.
            /// </param>
            /// <param name='inactive'>
            /// True to include inactive companies
            /// </param>
            /// <param name='page'>
            /// A page number within the paginated result set.
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return per page.
            /// </param>
            public static CredentialTopicFacetsOKResponse CredentialTopicFacets(this ISearch operations, string ordering = default(string), bool? inactive = default(bool?), int? page = default(int?), int? pageSize = default(int?))
            {
                return operations.CredentialTopicFacetsAsync(ordering, inactive, page, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// We want facet_counts from the less-restricted queryset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ordering'>
            /// Which field to use when ordering the results.
            /// </param>
            /// <param name='inactive'>
            /// True to include inactive companies
            /// </param>
            /// <param name='page'>
            /// A page number within the paginated result set.
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CredentialTopicFacetsOKResponse> CredentialTopicFacetsAsync(this ISearch operations, string ordering = default(string), bool? inactive = default(bool?), int? page = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CredentialTopicFacetsWithHttpMessagesAsync(ordering, inactive, page, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
