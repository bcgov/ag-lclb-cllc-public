// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CredentialType
    {
        /// <summary>
        /// Initializes a new instance of the CredentialType class.
        /// </summary>
        public CredentialType()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CredentialType class.
        /// </summary>
        /// <param name="id">ID</param>
        /// <param name="hasLogo">Has logo</param>
        /// <param name="createTimestamp">Create timestamp</param>
        /// <param name="updateTimestamp">Update timestamp</param>
        /// <param name="description">Description</param>
        /// <param name="credentialDefId">Credential def id</param>
        /// <param name="lastIssueDate">Last issue date</param>
        /// <param name="url">Url</param>
        public CredentialType(Issuer issuer, int? id = default(int?), bool? hasLogo = default(bool?), System.DateTimeOffset? createTimestamp = default(System.DateTimeOffset?), System.DateTimeOffset? updateTimestamp = default(System.DateTimeOffset?), string description = default(string), string credentialDefId = default(string), System.DateTimeOffset? lastIssueDate = default(System.DateTimeOffset?), string url = default(string), CredentialTypeSchema schema = default(CredentialTypeSchema))
        {
            Id = id;
            Issuer = issuer;
            HasLogo = hasLogo;
            CreateTimestamp = createTimestamp;
            UpdateTimestamp = updateTimestamp;
            Description = description;
            CredentialDefId = credentialDefId;
            LastIssueDate = lastIssueDate;
            Url = url;
            Schema = schema;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "issuer")]
        public Issuer Issuer { get; set; }

        /// <summary>
        /// Gets has logo
        /// </summary>
        [JsonProperty(PropertyName = "has_logo")]
        public bool? HasLogo { get; private set; }

        /// <summary>
        /// Gets create timestamp
        /// </summary>
        [JsonProperty(PropertyName = "create_timestamp")]
        public System.DateTimeOffset? CreateTimestamp { get; private set; }

        /// <summary>
        /// Gets update timestamp
        /// </summary>
        [JsonProperty(PropertyName = "update_timestamp")]
        public System.DateTimeOffset? UpdateTimestamp { get; private set; }

        /// <summary>
        /// Gets or sets description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets credential def id
        /// </summary>
        [JsonProperty(PropertyName = "credential_def_id")]
        public string CredentialDefId { get; set; }

        /// <summary>
        /// Gets or sets last issue date
        /// </summary>
        [JsonProperty(PropertyName = "last_issue_date")]
        public System.DateTimeOffset? LastIssueDate { get; set; }

        /// <summary>
        /// Gets or sets url
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schema")]
        public CredentialTypeSchema Schema { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Issuer == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Issuer");
            }
            if (Issuer != null)
            {
                Issuer.Validate();
            }
            if (CredentialDefId != null)
            {
                if (CredentialDefId.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CredentialDefId", 1);
                }
            }
            if (Schema != null)
            {
                Schema.Validate();
            }
        }
    }
}
