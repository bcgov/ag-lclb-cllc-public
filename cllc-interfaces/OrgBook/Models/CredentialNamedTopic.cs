// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CredentialNamedTopic
    {
        /// <summary>
        /// Initializes a new instance of the CredentialNamedTopic class.
        /// </summary>
        public CredentialNamedTopic()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CredentialNamedTopic class.
        /// </summary>
        /// <param name="sourceId">Source id</param>
        /// <param name="type">Type</param>
        /// <param name="id">ID</param>
        /// <param name="createTimestamp">Create timestamp</param>
        /// <param name="updateTimestamp">Update timestamp</param>
        public CredentialNamedTopic(string sourceId, string type, IList<CredentialName> names, int? id = default(int?), System.DateTimeOffset? createTimestamp = default(System.DateTimeOffset?), System.DateTimeOffset? updateTimestamp = default(System.DateTimeOffset?))
        {
            Id = id;
            CreateTimestamp = createTimestamp;
            UpdateTimestamp = updateTimestamp;
            SourceId = sourceId;
            Type = type;
            Names = names;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets create timestamp
        /// </summary>
        [JsonProperty(PropertyName = "create_timestamp")]
        public System.DateTimeOffset? CreateTimestamp { get; private set; }

        /// <summary>
        /// Gets update timestamp
        /// </summary>
        [JsonProperty(PropertyName = "update_timestamp")]
        public System.DateTimeOffset? UpdateTimestamp { get; private set; }

        /// <summary>
        /// Gets or sets source id
        /// </summary>
        [JsonProperty(PropertyName = "source_id")]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or sets type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "names")]
        public IList<CredentialName> Names { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceId");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Names == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Names");
            }
            if (SourceId != null)
            {
                if (SourceId.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SourceId", 1);
                }
            }
            if (Type != null)
            {
                if (Type.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Type", 1);
                }
            }
            if (Names != null)
            {
                foreach (var element in Names)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
