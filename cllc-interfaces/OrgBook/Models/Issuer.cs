// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Issuer
    /// </summary>
    public partial class Issuer
    {
        /// <summary>
        /// Initializes a new instance of the Issuer class.
        /// </summary>
        public Issuer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Issuer class.
        /// </summary>
        /// <param name="did">Did</param>
        /// <param name="name">Name</param>
        /// <param name="abbreviation">Abbreviation</param>
        /// <param name="email">Email</param>
        /// <param name="url">Url</param>
        /// <param name="id">ID</param>
        /// <param name="hasLogo">Has logo</param>
        /// <param name="createTimestamp">Create timestamp</param>
        /// <param name="updateTimestamp">Update timestamp</param>
        /// <param name="endpoint">Endpoint</param>
        public Issuer(string did, string name, string abbreviation, string email, string url, int? id = default(int?), bool? hasLogo = default(bool?), System.DateTimeOffset? createTimestamp = default(System.DateTimeOffset?), System.DateTimeOffset? updateTimestamp = default(System.DateTimeOffset?), string endpoint = default(string))
        {
            Id = id;
            HasLogo = hasLogo;
            CreateTimestamp = createTimestamp;
            UpdateTimestamp = updateTimestamp;
            Did = did;
            Name = name;
            Abbreviation = abbreviation;
            Email = email;
            Url = url;
            Endpoint = endpoint;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets has logo
        /// </summary>
        [JsonProperty(PropertyName = "has_logo")]
        public bool? HasLogo { get; private set; }

        /// <summary>
        /// Gets create timestamp
        /// </summary>
        [JsonProperty(PropertyName = "create_timestamp")]
        public System.DateTimeOffset? CreateTimestamp { get; private set; }

        /// <summary>
        /// Gets update timestamp
        /// </summary>
        [JsonProperty(PropertyName = "update_timestamp")]
        public System.DateTimeOffset? UpdateTimestamp { get; private set; }

        /// <summary>
        /// Gets or sets did
        /// </summary>
        [JsonProperty(PropertyName = "did")]
        public string Did { get; set; }

        /// <summary>
        /// Gets or sets name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets abbreviation
        /// </summary>
        [JsonProperty(PropertyName = "abbreviation")]
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or sets email
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets url
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets endpoint
        /// </summary>
        [JsonProperty(PropertyName = "endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Did == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Did");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Abbreviation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Abbreviation");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (Did != null)
            {
                if (Did.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Did", 1);
                }
            }
            if (Name != null)
            {
                if (Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
            if (Abbreviation != null)
            {
                if (Abbreviation.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Abbreviation", 1);
                }
            }
            if (Email != null)
            {
                if (Email.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Email", 1);
                }
            }
            if (Url != null)
            {
                if (Url.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Url", 1);
                }
            }
            if (Endpoint != null)
            {
                if (Endpoint.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Endpoint", 1);
                }
            }
        }
    }
}
