// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CredentialAddress
    {
        /// <summary>
        /// Initializes a new instance of the CredentialAddress class.
        /// </summary>
        public CredentialAddress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CredentialAddress class.
        /// </summary>
        /// <param name="province">Province</param>
        /// <param name="addressee">Addressee</param>
        /// <param name="country">Country</param>
        /// <param name="id">ID</param>
        /// <param name="postalCode">Postal code</param>
        /// <param name="createTimestamp">Create timestamp</param>
        /// <param name="city">City</param>
        /// <param name="credentialId">Credential id</param>
        /// <param name="civicAddress">Civic address</param>
        /// <param name="updateTimestamp">Update timestamp</param>
        public CredentialAddress(string province = default(string), string addressee = default(string), string country = default(string), int? id = default(int?), string postalCode = default(string), System.DateTimeOffset? createTimestamp = default(System.DateTimeOffset?), string city = default(string), string credentialId = default(string), string civicAddress = default(string), System.DateTimeOffset? updateTimestamp = default(System.DateTimeOffset?))
        {
            Province = province;
            Addressee = addressee;
            Country = country;
            Id = id;
            PostalCode = postalCode;
            CreateTimestamp = createTimestamp;
            City = city;
            CredentialId = credentialId;
            CivicAddress = civicAddress;
            UpdateTimestamp = updateTimestamp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets province
        /// </summary>
        [JsonProperty(PropertyName = "province")]
        public string Province { get; set; }

        /// <summary>
        /// Gets or sets addressee
        /// </summary>
        [JsonProperty(PropertyName = "addressee")]
        public string Addressee { get; set; }

        /// <summary>
        /// Gets or sets country
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or sets postal code
        /// </summary>
        [JsonProperty(PropertyName = "postal_code")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets create timestamp
        /// </summary>
        [JsonProperty(PropertyName = "create_timestamp")]
        public System.DateTimeOffset? CreateTimestamp { get; private set; }

        /// <summary>
        /// Gets or sets city
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets credential id
        /// </summary>
        [JsonProperty(PropertyName = "credential_id")]
        public string CredentialId { get; private set; }

        /// <summary>
        /// Gets or sets civic address
        /// </summary>
        [JsonProperty(PropertyName = "civic_address")]
        public string CivicAddress { get; set; }

        /// <summary>
        /// Gets update timestamp
        /// </summary>
        [JsonProperty(PropertyName = "update_timestamp")]
        public System.DateTimeOffset? UpdateTimestamp { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Province != null)
            {
                if (Province.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Province", 1);
                }
            }
            if (Addressee != null)
            {
                if (Addressee.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Addressee", 1);
                }
            }
            if (Country != null)
            {
                if (Country.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Country", 1);
                }
            }
            if (PostalCode != null)
            {
                if (PostalCode.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PostalCode", 1);
                }
            }
            if (City != null)
            {
                if (City.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "City", 1);
                }
            }
            if (CivicAddress != null)
            {
                if (CivicAddress.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CivicAddress", 1);
                }
            }
        }
    }
}
