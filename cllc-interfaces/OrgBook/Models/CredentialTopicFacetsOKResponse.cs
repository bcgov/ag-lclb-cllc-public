// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CredentialTopicFacetsOKResponse
    {
        /// <summary>
        /// Initializes a new instance of the CredentialTopicFacetsOKResponse
        /// class.
        /// </summary>
        public CredentialTopicFacetsOKResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CredentialTopicFacetsOKResponse
        /// class.
        /// </summary>
        public CredentialTopicFacetsOKResponse(int count, IList<CredentialTopicSearch> results, string next = default(string), string previous = default(string))
        {
            Count = count;
            Next = next;
            Previous = previous;
            Results = results;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "next")]
        public string Next { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "previous")]
        public string Previous { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "results")]
        public IList<CredentialTopicSearch> Results { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Results == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Results");
            }
            if (Results != null)
            {
                foreach (var element in Results)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
