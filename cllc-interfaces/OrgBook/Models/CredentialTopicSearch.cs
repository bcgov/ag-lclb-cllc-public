// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CredentialTopicSearch
    {
        /// <summary>
        /// Initializes a new instance of the CredentialTopicSearch class.
        /// </summary>
        public CredentialTopicSearch()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CredentialTopicSearch class.
        /// </summary>
        /// <param name="walletId">Wallet id</param>
        /// <param name="id">ID</param>
        /// <param name="createTimestamp">Create timestamp</param>
        /// <param name="updateTimestamp">Update timestamp</param>
        /// <param name="effectiveDate">Effective date</param>
        /// <param name="inactive">Inactive</param>
        /// <param name="latest">Latest</param>
        /// <param name="revoked">Revoked</param>
        /// <param name="revokedDate">Revoked date</param>
        public CredentialTopicSearch(string walletId, CredentialSet credentialSet, CredentialType credentialType, IList<CredentialName> names, CredentialTopicExt topic, IList<CredentialNamedTopic> relatedTopics, int? id = default(int?), System.DateTimeOffset? createTimestamp = default(System.DateTimeOffset?), System.DateTimeOffset? updateTimestamp = default(System.DateTimeOffset?), System.DateTimeOffset? effectiveDate = default(System.DateTimeOffset?), bool? inactive = default(bool?), bool? latest = default(bool?), bool? revoked = default(bool?), System.DateTimeOffset? revokedDate = default(System.DateTimeOffset?))
        {
            Id = id;
            CreateTimestamp = createTimestamp;
            UpdateTimestamp = updateTimestamp;
            EffectiveDate = effectiveDate;
            Inactive = inactive;
            Latest = latest;
            Revoked = revoked;
            RevokedDate = revokedDate;
            WalletId = walletId;
            CredentialSet = credentialSet;
            CredentialType = credentialType;
            Names = names;
            Topic = topic;
            RelatedTopics = relatedTopics;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets create timestamp
        /// </summary>
        [JsonProperty(PropertyName = "create_timestamp")]
        public System.DateTimeOffset? CreateTimestamp { get; private set; }

        /// <summary>
        /// Gets update timestamp
        /// </summary>
        [JsonProperty(PropertyName = "update_timestamp")]
        public System.DateTimeOffset? UpdateTimestamp { get; private set; }

        /// <summary>
        /// Gets or sets effective date
        /// </summary>
        [JsonProperty(PropertyName = "effective_date")]
        public System.DateTimeOffset? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets inactive
        /// </summary>
        [JsonProperty(PropertyName = "inactive")]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or sets latest
        /// </summary>
        [JsonProperty(PropertyName = "latest")]
        public bool? Latest { get; set; }

        /// <summary>
        /// Gets or sets revoked
        /// </summary>
        [JsonProperty(PropertyName = "revoked")]
        public bool? Revoked { get; set; }

        /// <summary>
        /// Gets or sets revoked date
        /// </summary>
        [JsonProperty(PropertyName = "revoked_date")]
        public System.DateTimeOffset? RevokedDate { get; set; }

        /// <summary>
        /// Gets or sets wallet id
        /// </summary>
        [JsonProperty(PropertyName = "wallet_id")]
        public string WalletId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "credential_set")]
        public CredentialSet CredentialSet { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "credential_type")]
        public CredentialType CredentialType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "names")]
        public IList<CredentialName> Names { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "topic")]
        public CredentialTopicExt Topic { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "related_topics")]
        public IList<CredentialNamedTopic> RelatedTopics { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WalletId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WalletId");
            }
            if (CredentialSet == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CredentialSet");
            }
            if (CredentialType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CredentialType");
            }
            if (Names == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Names");
            }
            if (Topic == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Topic");
            }
            if (RelatedTopics == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RelatedTopics");
            }
            if (WalletId != null)
            {
                if (WalletId.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "WalletId", 1);
                }
            }
            if (CredentialType != null)
            {
                CredentialType.Validate();
            }
            if (Names != null)
            {
                foreach (var element in Names)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Topic != null)
            {
                Topic.Validate();
            }
            if (RelatedTopics != null)
            {
                foreach (var element1 in RelatedTopics)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
