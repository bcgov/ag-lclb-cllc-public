// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces.GeoCoder
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GeoCoderAPI.
    /// </summary>
    public static partial class GeoCoderAPIExtensions
    {
            /// <summary>
            /// Geocode an address
            /// </summary>
            /// <remarks>
            /// Represents the set of geocoded and standardized sites and intersections
            /// whose address best matches a given query address.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='addressString'>
            /// Civic or intersection address as a single string. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#addressString
            /// target="_blank"&gt;addressString&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='interpolation'>
            /// accessPoint interpolation method. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#interpolation
            /// target="_blank"&gt;interpolation&lt;/a&gt;. Possible values include:
            /// 'adaptive', 'linear', 'none'
            /// </param>
            /// <param name='echo'>
            /// If true, include unmatched address details such as site name in results.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='autoComplete'>
            /// If true, addressString is expected to contain a partial address that
            /// requires completion. Not supported for shp, csv, gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minScore'>
            /// The minimum score required for a match to be returned. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#minScore
            /// target="_blank"&gt;minScore&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecision'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to include in results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecision
            /// target="_blank"&gt;matchPrecision&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecisionNot'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to exclude from results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecisionNot
            /// target="_blank"&gt;matchPrecisionNot&lt;/a&gt;
            /// </param>
            /// <param name='siteName'>
            /// A string containing the name of the building, facility, or institution
            /// (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#siteName
            /// target="_blank"&gt;siteName&lt;/a&gt;
            /// </param>
            /// <param name='unitDesignator'>
            /// The type of unit within a house or building. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#unitDesignator
            /// target="_blank"&gt;unitDesignator&lt;/a&gt;. Possible values include:
            /// 'APT', 'BLDG', 'BSMT', 'FLR', 'LOBBY', 'LWR', 'PAD', 'PH', 'REAR', 'RM',
            /// 'SIDE', 'SITE', 'SUITE', 'TH', 'UNIT', 'UPPR'
            /// </param>
            /// <param name='unitNumber'>
            /// The number of the unit, suite, or apartment within a house or building.
            /// </param>
            /// <param name='unitNumberSuffix'>
            /// A letter that follows the unit number as in Unit 1A or Suite 302B.
            /// </param>
            /// <param name='civicNumber'>
            /// The official number assigned to a site by an address authority. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumber
            /// target="_blank"&gt;civicNumber&lt;/a&gt;
            /// </param>
            /// <param name='civicNumberSuffix'>
            /// A letter or fraction that follows the civic number (e.g., the A in 1039A
            /// Bledsoe St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumberSuffix
            /// target="_blank"&gt;civicNumberSuffix&lt;/a&gt;
            /// </param>
            /// <param name='streetName'>
            /// The official name of the street as assigned by an address authority (e.g.,
            /// the Douglas in 1175 Douglas Street). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetName
            /// target="_blank"&gt;streetName&lt;/a&gt;
            /// </param>
            /// <param name='streetType'>
            /// The type of street as assigned by a municipality (e.g., the ST in 1175
            /// DOUGLAS St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetType
            /// target="_blank"&gt;streetType&lt;/a&gt;
            /// </param>
            /// <param name='streetDirection'>
            /// The abbreviated compass direction as defined by Canada Post and B.C. civic
            /// addressing authorities. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;. Possible values include: 'N',
            /// 'S', 'E', 'W', 'O', 'NE', 'NO', 'NW', 'SE', 'SO', 'SW'
            /// </param>
            /// <param name='streetQualifier'>
            /// Example: the Bridge in Johnson St Bridge. The qualifier of a street name.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetQualifier
            /// target="_blank"&gt;streetQualifier&lt;/a&gt;
            /// </param>
            /// <param name='localityName'>
            /// The name of the locality assigned to a given site by an address authority.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#localityName
            /// target="_blank"&gt;localityName&lt;/a&gt;
            /// </param>
            /// <param name='provinceCode'>
            /// The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
            /// </param>
            /// <param name='localities'>
            /// A comma separated list of locality names that matched addresses must belong
            /// to. For example, setting localities to Nanaimo only returns addresses in
            /// Nanaimo
            /// </param>
            /// <param name='notLocalities'>
            /// A comma-separated list of localities to exclude from the search.
            /// </param>
            /// <param name='bbox'>
            /// Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box
            /// (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='centre'>
            /// Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y)
            /// used to define a bounding circle that will limit the search area. This
            /// parameter must be specified together with 'maxDistance'. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#centre
            /// target='_blank'&gt;centre&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='extrapolate'>
            /// If true, uses supplied parcelPoint to derive an appropriate accessPoint.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#extrapolate
            /// target="_blank"&gt;extrapolate&lt;/a&gt;
            /// </param>
            /// <param name='parcelPoint'>
            /// The coordinates of a point (x,y) known to be inside the parcel containing a
            /// given address. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#parcelPoint
            /// target="_blank"&gt;parcelPoint&lt;/a&gt;
            /// </param>
            public static JsonResponse Sites(this IGeoCoderAPI operations, string outputFormat, string addressString = default(string), string locationDescriptor = default(string), int? maxResults = 1, string interpolation = default(string), bool? echo = true, bool? brief = false, bool? autoComplete = false, int? setBack = 0, int? outputSRS = 4326, int? minScore = 1, string matchPrecision = default(string), string matchPrecisionNot = default(string), string siteName = default(string), string unitDesignator = default(string), string unitNumber = default(string), string unitNumberSuffix = default(string), string civicNumber = default(string), string civicNumberSuffix = default(string), string streetName = default(string), string streetType = default(string), string streetDirection = default(string), string streetQualifier = default(string), string localityName = default(string), string provinceCode = "BC", string localities = default(string), string notLocalities = default(string), string bbox = default(string), string centre = default(string), double? maxDistance = default(double?), bool? extrapolate = default(bool?), string parcelPoint = default(string))
            {
                return operations.SitesAsync(outputFormat, addressString, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Geocode an address
            /// </summary>
            /// <remarks>
            /// Represents the set of geocoded and standardized sites and intersections
            /// whose address best matches a given query address.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='addressString'>
            /// Civic or intersection address as a single string. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#addressString
            /// target="_blank"&gt;addressString&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='interpolation'>
            /// accessPoint interpolation method. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#interpolation
            /// target="_blank"&gt;interpolation&lt;/a&gt;. Possible values include:
            /// 'adaptive', 'linear', 'none'
            /// </param>
            /// <param name='echo'>
            /// If true, include unmatched address details such as site name in results.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='autoComplete'>
            /// If true, addressString is expected to contain a partial address that
            /// requires completion. Not supported for shp, csv, gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minScore'>
            /// The minimum score required for a match to be returned. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#minScore
            /// target="_blank"&gt;minScore&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecision'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to include in results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecision
            /// target="_blank"&gt;matchPrecision&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecisionNot'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to exclude from results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecisionNot
            /// target="_blank"&gt;matchPrecisionNot&lt;/a&gt;
            /// </param>
            /// <param name='siteName'>
            /// A string containing the name of the building, facility, or institution
            /// (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#siteName
            /// target="_blank"&gt;siteName&lt;/a&gt;
            /// </param>
            /// <param name='unitDesignator'>
            /// The type of unit within a house or building. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#unitDesignator
            /// target="_blank"&gt;unitDesignator&lt;/a&gt;. Possible values include:
            /// 'APT', 'BLDG', 'BSMT', 'FLR', 'LOBBY', 'LWR', 'PAD', 'PH', 'REAR', 'RM',
            /// 'SIDE', 'SITE', 'SUITE', 'TH', 'UNIT', 'UPPR'
            /// </param>
            /// <param name='unitNumber'>
            /// The number of the unit, suite, or apartment within a house or building.
            /// </param>
            /// <param name='unitNumberSuffix'>
            /// A letter that follows the unit number as in Unit 1A or Suite 302B.
            /// </param>
            /// <param name='civicNumber'>
            /// The official number assigned to a site by an address authority. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumber
            /// target="_blank"&gt;civicNumber&lt;/a&gt;
            /// </param>
            /// <param name='civicNumberSuffix'>
            /// A letter or fraction that follows the civic number (e.g., the A in 1039A
            /// Bledsoe St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumberSuffix
            /// target="_blank"&gt;civicNumberSuffix&lt;/a&gt;
            /// </param>
            /// <param name='streetName'>
            /// The official name of the street as assigned by an address authority (e.g.,
            /// the Douglas in 1175 Douglas Street). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetName
            /// target="_blank"&gt;streetName&lt;/a&gt;
            /// </param>
            /// <param name='streetType'>
            /// The type of street as assigned by a municipality (e.g., the ST in 1175
            /// DOUGLAS St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetType
            /// target="_blank"&gt;streetType&lt;/a&gt;
            /// </param>
            /// <param name='streetDirection'>
            /// The abbreviated compass direction as defined by Canada Post and B.C. civic
            /// addressing authorities. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;. Possible values include: 'N',
            /// 'S', 'E', 'W', 'O', 'NE', 'NO', 'NW', 'SE', 'SO', 'SW'
            /// </param>
            /// <param name='streetQualifier'>
            /// Example: the Bridge in Johnson St Bridge. The qualifier of a street name.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetQualifier
            /// target="_blank"&gt;streetQualifier&lt;/a&gt;
            /// </param>
            /// <param name='localityName'>
            /// The name of the locality assigned to a given site by an address authority.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#localityName
            /// target="_blank"&gt;localityName&lt;/a&gt;
            /// </param>
            /// <param name='provinceCode'>
            /// The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
            /// </param>
            /// <param name='localities'>
            /// A comma separated list of locality names that matched addresses must belong
            /// to. For example, setting localities to Nanaimo only returns addresses in
            /// Nanaimo
            /// </param>
            /// <param name='notLocalities'>
            /// A comma-separated list of localities to exclude from the search.
            /// </param>
            /// <param name='bbox'>
            /// Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box
            /// (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='centre'>
            /// Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y)
            /// used to define a bounding circle that will limit the search area. This
            /// parameter must be specified together with 'maxDistance'. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#centre
            /// target='_blank'&gt;centre&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='extrapolate'>
            /// If true, uses supplied parcelPoint to derive an appropriate accessPoint.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#extrapolate
            /// target="_blank"&gt;extrapolate&lt;/a&gt;
            /// </param>
            /// <param name='parcelPoint'>
            /// The coordinates of a point (x,y) known to be inside the parcel containing a
            /// given address. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#parcelPoint
            /// target="_blank"&gt;parcelPoint&lt;/a&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResponse> SitesAsync(this IGeoCoderAPI operations, string outputFormat, string addressString = default(string), string locationDescriptor = default(string), int? maxResults = 1, string interpolation = default(string), bool? echo = true, bool? brief = false, bool? autoComplete = false, int? setBack = 0, int? outputSRS = 4326, int? minScore = 1, string matchPrecision = default(string), string matchPrecisionNot = default(string), string siteName = default(string), string unitDesignator = default(string), string unitNumber = default(string), string unitNumberSuffix = default(string), string civicNumber = default(string), string civicNumberSuffix = default(string), string streetName = default(string), string streetType = default(string), string streetDirection = default(string), string streetQualifier = default(string), string localityName = default(string), string provinceCode = "BC", string localities = default(string), string notLocalities = default(string), string bbox = default(string), string centre = default(string), double? maxDistance = default(double?), bool? extrapolate = default(bool?), string parcelPoint = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SitesWithHttpMessagesAsync(outputFormat, addressString, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Geocode an address
            /// </summary>
            /// <remarks>
            /// Represents the set of geocoded and standardized sites and intersections
            /// whose address best matches a given query address.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='addressString'>
            /// Civic or intersection address as a single string. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#addressString
            /// target="_blank"&gt;addressString&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='interpolation'>
            /// accessPoint interpolation method. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#interpolation
            /// target="_blank"&gt;interpolation&lt;/a&gt;. Possible values include:
            /// 'adaptive', 'linear', 'none'
            /// </param>
            /// <param name='echo'>
            /// If true, include unmatched address details such as site name in results.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='autoComplete'>
            /// If true, addressString is expected to contain a partial address that
            /// requires completion. Not supported for shp, csv, gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minScore'>
            /// The minimum score required for a match to be returned. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#minScore
            /// target="_blank"&gt;minScore&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecision'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to include in results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecision
            /// target="_blank"&gt;matchPrecision&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecisionNot'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to exclude from results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecisionNot
            /// target="_blank"&gt;matchPrecisionNot&lt;/a&gt;
            /// </param>
            /// <param name='siteName'>
            /// A string containing the name of the building, facility, or institution
            /// (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#siteName
            /// target="_blank"&gt;siteName&lt;/a&gt;
            /// </param>
            /// <param name='unitDesignator'>
            /// The type of unit within a house or building. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#unitDesignator
            /// target="_blank"&gt;unitDesignator&lt;/a&gt;. Possible values include:
            /// 'APT', 'BLDG', 'BSMT', 'FLR', 'LOBBY', 'LWR', 'PAD', 'PH', 'REAR', 'RM',
            /// 'SIDE', 'SITE', 'SUITE', 'TH', 'UNIT', 'UPPR'
            /// </param>
            /// <param name='unitNumber'>
            /// The number of the unit, suite, or apartment within a house or building.
            /// </param>
            /// <param name='unitNumberSuffix'>
            /// A letter that follows the unit number as in Unit 1A or Suite 302B.
            /// </param>
            /// <param name='civicNumber'>
            /// The official number assigned to a site by an address authority. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumber
            /// target="_blank"&gt;civicNumber&lt;/a&gt;
            /// </param>
            /// <param name='civicNumberSuffix'>
            /// A letter or fraction that follows the civic number (e.g., the A in 1039A
            /// Bledsoe St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumberSuffix
            /// target="_blank"&gt;civicNumberSuffix&lt;/a&gt;
            /// </param>
            /// <param name='streetName'>
            /// The official name of the street as assigned by an address authority (e.g.,
            /// the Douglas in 1175 Douglas Street). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetName
            /// target="_blank"&gt;streetName&lt;/a&gt;
            /// </param>
            /// <param name='streetType'>
            /// The type of street as assigned by a municipality (e.g., the ST in 1175
            /// DOUGLAS St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetType
            /// target="_blank"&gt;streetType&lt;/a&gt;
            /// </param>
            /// <param name='streetDirection'>
            /// The abbreviated compass direction as defined by Canada Post and B.C. civic
            /// addressing authorities. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;. Possible values include: 'N',
            /// 'S', 'E', 'W', 'O', 'NE', 'NO', 'NW', 'SE', 'SO', 'SW'
            /// </param>
            /// <param name='streetQualifier'>
            /// Example: the Bridge in Johnson St Bridge. The qualifier of a street name.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetQualifier
            /// target="_blank"&gt;streetQualifier&lt;/a&gt;
            /// </param>
            /// <param name='localityName'>
            /// The name of the locality assigned to a given site by an address authority.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#localityName
            /// target="_blank"&gt;localityName&lt;/a&gt;
            /// </param>
            /// <param name='provinceCode'>
            /// The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
            /// </param>
            /// <param name='localities'>
            /// A comma separated list of locality names that matched addresses must belong
            /// to. For example, setting localities to Nanaimo only returns addresses in
            /// Nanaimo
            /// </param>
            /// <param name='notLocalities'>
            /// A comma-separated list of localities to exclude from the search.
            /// </param>
            /// <param name='bbox'>
            /// Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box
            /// (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='centre'>
            /// Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y)
            /// used to define a bounding circle that will limit the search area. This
            /// parameter must be specified together with 'maxDistance'. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#centre
            /// target='_blank'&gt;centre&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='extrapolate'>
            /// If true, uses supplied parcelPoint to derive an appropriate accessPoint.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#extrapolate
            /// target="_blank"&gt;extrapolate&lt;/a&gt;
            /// </param>
            /// <param name='parcelPoint'>
            /// The coordinates of a point (x,y) known to be inside the parcel containing a
            /// given address. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#parcelPoint
            /// target="_blank"&gt;parcelPoint&lt;/a&gt;
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<JsonResponse> SitesWithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string addressString = default(string), string locationDescriptor = default(string), int? maxResults = 1, string interpolation = default(string), bool? echo = true, bool? brief = false, bool? autoComplete = false, int? setBack = 0, int? outputSRS = 4326, int? minScore = 1, string matchPrecision = default(string), string matchPrecisionNot = default(string), string siteName = default(string), string unitDesignator = default(string), string unitNumber = default(string), string unitNumberSuffix = default(string), string civicNumber = default(string), string civicNumberSuffix = default(string), string streetName = default(string), string streetType = default(string), string streetDirection = default(string), string streetQualifier = default(string), string localityName = default(string), string provinceCode = "BC", string localities = default(string), string notLocalities = default(string), string bbox = default(string), string centre = default(string), double? maxDistance = default(double?), bool? extrapolate = default(bool?), string parcelPoint = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SitesWithHttpMessagesAsync(outputFormat, addressString, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Geocode an address and identify site occupants
            /// </summary>
            /// <remarks>
            /// Represents the set of occupants whose addresses best match a given query
            /// address. Every occupant has an associated site which has a standardized
            /// address and a coordinate location on the Earth.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='addressString'>
            /// Occupant name OR Occupant name ** address
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='interpolation'>
            /// accessPoint interpolation method. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#interpolation
            /// target="_blank"&gt;interpolation&lt;/a&gt;. Possible values include:
            /// 'adaptive', 'linear', 'none'
            /// </param>
            /// <param name='echo'>
            /// If true, include unmatched address details such as site name in results.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='autoComplete'>
            /// If true, addressString is expected to contain a partial address that
            /// requires completion. Not supported for shp, csv, gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minScore'>
            /// The minimum score required for a match to be returned. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#minScore
            /// target="_blank"&gt;minScore&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecision'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to include in results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecision
            /// target="_blank"&gt;matchPrecision&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecisionNot'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to exclude from results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecisionNot
            /// target="_blank"&gt;matchPrecisionNot&lt;/a&gt;
            /// </param>
            /// <param name='siteName'>
            /// A string containing the name of the building, facility, or institution
            /// (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#siteName
            /// target="_blank"&gt;siteName&lt;/a&gt;
            /// </param>
            /// <param name='unitDesignator'>
            /// The type of unit within a house or building. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#unitDesignator
            /// target="_blank"&gt;unitDesignator&lt;/a&gt;. Possible values include:
            /// 'APT', 'BLDG', 'BSMT', 'FLR', 'LOBBY', 'LWR', 'PAD', 'PH', 'REAR', 'RM',
            /// 'SIDE', 'SITE', 'SUITE', 'TH', 'UNIT', 'UPPR'
            /// </param>
            /// <param name='unitNumber'>
            /// The number of the unit, suite, or apartment within a house or building.
            /// </param>
            /// <param name='unitNumberSuffix'>
            /// A letter that follows the unit number as in Unit 1A or Suite 302B.
            /// </param>
            /// <param name='civicNumber'>
            /// The official number assigned to a site by an address authority. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumber
            /// target="_blank"&gt;civicNumber&lt;/a&gt;
            /// </param>
            /// <param name='civicNumberSuffix'>
            /// A letter or fraction that follows the civic number (e.g., the A in 1039A
            /// Bledsoe St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumberSuffix
            /// target="_blank"&gt;civicNumberSuffix&lt;/a&gt;
            /// </param>
            /// <param name='streetName'>
            /// The official name of the street as assigned by an address authority (e.g.,
            /// the Douglas in 1175 Douglas Street). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetName
            /// target="_blank"&gt;streetName&lt;/a&gt;
            /// </param>
            /// <param name='streetType'>
            /// The type of street as assigned by a municipality (e.g., the ST in 1175
            /// DOUGLAS St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetType
            /// target="_blank"&gt;streetType&lt;/a&gt;
            /// </param>
            /// <param name='streetDirection'>
            /// The abbreviated compass direction as defined by Canada Post and B.C. civic
            /// addressing authorities. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;. Possible values include: 'N',
            /// 'S', 'E', 'W', 'O', 'NE', 'NO', 'NW', 'SE', 'SO', 'SW'
            /// </param>
            /// <param name='streetQualifier'>
            /// The qualifier of a street name (e.g., the Bridge in Johnson St Bridge)
            /// </param>
            /// <param name='localityName'>
            /// The name of the locality assigned to a given site by an address authority.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;
            /// </param>
            /// <param name='provinceCode'>
            /// The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
            /// </param>
            /// <param name='localities'>
            /// A comma separated list of locality names that matched addresses must belong
            /// to. For example, setting localities to Nanaimo only returns addresses in
            /// Nanaimo
            /// </param>
            /// <param name='notLocalities'>
            /// A comma-separated list of localities to exclude from the search.
            /// </param>
            /// <param name='bbox'>
            /// Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box
            /// (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='centre'>
            /// Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y)
            /// used to define a bounding circle that will limit the search area. This
            /// parameter must be specified together with 'maxDistance'. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#centre
            /// target='_blank'&gt;centre&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='extrapolate'>
            /// If true, uses supplied parcelPoint to derive an appropriate accessPoint.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#extrapolate
            /// target="_blank"&gt;extrapolate&lt;/a&gt;
            /// </param>
            /// <param name='parcelPoint'>
            /// The coordinates of a point (x,y) known to be inside the parcel containing a
            /// given address. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#parcelPoint
            /// target="_blank"&gt;parcelPoint&lt;/a&gt;
            /// </param>
            public static void Occupants(this IGeoCoderAPI operations, string outputFormat, string addressString = default(string), string tags = default(string), string locationDescriptor = default(string), int? maxResults = 1, string interpolation = default(string), bool? echo = false, bool? brief = false, bool? autoComplete = false, int? setBack = 0, int? outputSRS = 4326, int? minScore = 1, string matchPrecision = "OCCUPANT", string matchPrecisionNot = default(string), string siteName = default(string), string unitDesignator = default(string), string unitNumber = default(string), string unitNumberSuffix = default(string), string civicNumber = default(string), string civicNumberSuffix = default(string), string streetName = default(string), string streetType = default(string), string streetDirection = default(string), string streetQualifier = default(string), string localityName = default(string), string provinceCode = "BC", string localities = default(string), string notLocalities = default(string), string bbox = default(string), string centre = default(string), double? maxDistance = default(double?), bool? extrapolate = default(bool?), string parcelPoint = default(string))
            {
                operations.OccupantsAsync(outputFormat, addressString, tags, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Geocode an address and identify site occupants
            /// </summary>
            /// <remarks>
            /// Represents the set of occupants whose addresses best match a given query
            /// address. Every occupant has an associated site which has a standardized
            /// address and a coordinate location on the Earth.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='addressString'>
            /// Occupant name OR Occupant name ** address
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='interpolation'>
            /// accessPoint interpolation method. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#interpolation
            /// target="_blank"&gt;interpolation&lt;/a&gt;. Possible values include:
            /// 'adaptive', 'linear', 'none'
            /// </param>
            /// <param name='echo'>
            /// If true, include unmatched address details such as site name in results.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='autoComplete'>
            /// If true, addressString is expected to contain a partial address that
            /// requires completion. Not supported for shp, csv, gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minScore'>
            /// The minimum score required for a match to be returned. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#minScore
            /// target="_blank"&gt;minScore&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecision'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to include in results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecision
            /// target="_blank"&gt;matchPrecision&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecisionNot'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to exclude from results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecisionNot
            /// target="_blank"&gt;matchPrecisionNot&lt;/a&gt;
            /// </param>
            /// <param name='siteName'>
            /// A string containing the name of the building, facility, or institution
            /// (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#siteName
            /// target="_blank"&gt;siteName&lt;/a&gt;
            /// </param>
            /// <param name='unitDesignator'>
            /// The type of unit within a house or building. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#unitDesignator
            /// target="_blank"&gt;unitDesignator&lt;/a&gt;. Possible values include:
            /// 'APT', 'BLDG', 'BSMT', 'FLR', 'LOBBY', 'LWR', 'PAD', 'PH', 'REAR', 'RM',
            /// 'SIDE', 'SITE', 'SUITE', 'TH', 'UNIT', 'UPPR'
            /// </param>
            /// <param name='unitNumber'>
            /// The number of the unit, suite, or apartment within a house or building.
            /// </param>
            /// <param name='unitNumberSuffix'>
            /// A letter that follows the unit number as in Unit 1A or Suite 302B.
            /// </param>
            /// <param name='civicNumber'>
            /// The official number assigned to a site by an address authority. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumber
            /// target="_blank"&gt;civicNumber&lt;/a&gt;
            /// </param>
            /// <param name='civicNumberSuffix'>
            /// A letter or fraction that follows the civic number (e.g., the A in 1039A
            /// Bledsoe St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumberSuffix
            /// target="_blank"&gt;civicNumberSuffix&lt;/a&gt;
            /// </param>
            /// <param name='streetName'>
            /// The official name of the street as assigned by an address authority (e.g.,
            /// the Douglas in 1175 Douglas Street). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetName
            /// target="_blank"&gt;streetName&lt;/a&gt;
            /// </param>
            /// <param name='streetType'>
            /// The type of street as assigned by a municipality (e.g., the ST in 1175
            /// DOUGLAS St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetType
            /// target="_blank"&gt;streetType&lt;/a&gt;
            /// </param>
            /// <param name='streetDirection'>
            /// The abbreviated compass direction as defined by Canada Post and B.C. civic
            /// addressing authorities. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;. Possible values include: 'N',
            /// 'S', 'E', 'W', 'O', 'NE', 'NO', 'NW', 'SE', 'SO', 'SW'
            /// </param>
            /// <param name='streetQualifier'>
            /// The qualifier of a street name (e.g., the Bridge in Johnson St Bridge)
            /// </param>
            /// <param name='localityName'>
            /// The name of the locality assigned to a given site by an address authority.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;
            /// </param>
            /// <param name='provinceCode'>
            /// The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
            /// </param>
            /// <param name='localities'>
            /// A comma separated list of locality names that matched addresses must belong
            /// to. For example, setting localities to Nanaimo only returns addresses in
            /// Nanaimo
            /// </param>
            /// <param name='notLocalities'>
            /// A comma-separated list of localities to exclude from the search.
            /// </param>
            /// <param name='bbox'>
            /// Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box
            /// (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='centre'>
            /// Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y)
            /// used to define a bounding circle that will limit the search area. This
            /// parameter must be specified together with 'maxDistance'. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#centre
            /// target='_blank'&gt;centre&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='extrapolate'>
            /// If true, uses supplied parcelPoint to derive an appropriate accessPoint.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#extrapolate
            /// target="_blank"&gt;extrapolate&lt;/a&gt;
            /// </param>
            /// <param name='parcelPoint'>
            /// The coordinates of a point (x,y) known to be inside the parcel containing a
            /// given address. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#parcelPoint
            /// target="_blank"&gt;parcelPoint&lt;/a&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OccupantsAsync(this IGeoCoderAPI operations, string outputFormat, string addressString = default(string), string tags = default(string), string locationDescriptor = default(string), int? maxResults = 1, string interpolation = default(string), bool? echo = false, bool? brief = false, bool? autoComplete = false, int? setBack = 0, int? outputSRS = 4326, int? minScore = 1, string matchPrecision = "OCCUPANT", string matchPrecisionNot = default(string), string siteName = default(string), string unitDesignator = default(string), string unitNumber = default(string), string unitNumberSuffix = default(string), string civicNumber = default(string), string civicNumberSuffix = default(string), string streetName = default(string), string streetType = default(string), string streetDirection = default(string), string streetQualifier = default(string), string localityName = default(string), string provinceCode = "BC", string localities = default(string), string notLocalities = default(string), string bbox = default(string), string centre = default(string), double? maxDistance = default(double?), bool? extrapolate = default(bool?), string parcelPoint = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OccupantsWithHttpMessagesAsync(outputFormat, addressString, tags, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Geocode an address and identify site occupants
            /// </summary>
            /// <remarks>
            /// Represents the set of occupants whose addresses best match a given query
            /// address. Every occupant has an associated site which has a standardized
            /// address and a coordinate location on the Earth.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='addressString'>
            /// Occupant name OR Occupant name ** address
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='interpolation'>
            /// accessPoint interpolation method. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#interpolation
            /// target="_blank"&gt;interpolation&lt;/a&gt;. Possible values include:
            /// 'adaptive', 'linear', 'none'
            /// </param>
            /// <param name='echo'>
            /// If true, include unmatched address details such as site name in results.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='autoComplete'>
            /// If true, addressString is expected to contain a partial address that
            /// requires completion. Not supported for shp, csv, gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minScore'>
            /// The minimum score required for a match to be returned. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#minScore
            /// target="_blank"&gt;minScore&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecision'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to include in results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecision
            /// target="_blank"&gt;matchPrecision&lt;/a&gt;
            /// </param>
            /// <param name='matchPrecisionNot'>
            /// Example: street,locality.  A comma separated list of individual match
            /// precision levels to exclude from results. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#matchPrecisionNot
            /// target="_blank"&gt;matchPrecisionNot&lt;/a&gt;
            /// </param>
            /// <param name='siteName'>
            /// A string containing the name of the building, facility, or institution
            /// (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#siteName
            /// target="_blank"&gt;siteName&lt;/a&gt;
            /// </param>
            /// <param name='unitDesignator'>
            /// The type of unit within a house or building. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#unitDesignator
            /// target="_blank"&gt;unitDesignator&lt;/a&gt;. Possible values include:
            /// 'APT', 'BLDG', 'BSMT', 'FLR', 'LOBBY', 'LWR', 'PAD', 'PH', 'REAR', 'RM',
            /// 'SIDE', 'SITE', 'SUITE', 'TH', 'UNIT', 'UPPR'
            /// </param>
            /// <param name='unitNumber'>
            /// The number of the unit, suite, or apartment within a house or building.
            /// </param>
            /// <param name='unitNumberSuffix'>
            /// A letter that follows the unit number as in Unit 1A or Suite 302B.
            /// </param>
            /// <param name='civicNumber'>
            /// The official number assigned to a site by an address authority. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumber
            /// target="_blank"&gt;civicNumber&lt;/a&gt;
            /// </param>
            /// <param name='civicNumberSuffix'>
            /// A letter or fraction that follows the civic number (e.g., the A in 1039A
            /// Bledsoe St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#civicNumberSuffix
            /// target="_blank"&gt;civicNumberSuffix&lt;/a&gt;
            /// </param>
            /// <param name='streetName'>
            /// The official name of the street as assigned by an address authority (e.g.,
            /// the Douglas in 1175 Douglas Street). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetName
            /// target="_blank"&gt;streetName&lt;/a&gt;
            /// </param>
            /// <param name='streetType'>
            /// The type of street as assigned by a municipality (e.g., the ST in 1175
            /// DOUGLAS St). See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetType
            /// target="_blank"&gt;streetType&lt;/a&gt;
            /// </param>
            /// <param name='streetDirection'>
            /// The abbreviated compass direction as defined by Canada Post and B.C. civic
            /// addressing authorities. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;. Possible values include: 'N',
            /// 'S', 'E', 'W', 'O', 'NE', 'NO', 'NW', 'SE', 'SO', 'SW'
            /// </param>
            /// <param name='streetQualifier'>
            /// The qualifier of a street name (e.g., the Bridge in Johnson St Bridge)
            /// </param>
            /// <param name='localityName'>
            /// The name of the locality assigned to a given site by an address authority.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#streetDirection
            /// target="_blank"&gt;streetDirection&lt;/a&gt;
            /// </param>
            /// <param name='provinceCode'>
            /// The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
            /// </param>
            /// <param name='localities'>
            /// A comma separated list of locality names that matched addresses must belong
            /// to. For example, setting localities to Nanaimo only returns addresses in
            /// Nanaimo
            /// </param>
            /// <param name='notLocalities'>
            /// A comma-separated list of localities to exclude from the search.
            /// </param>
            /// <param name='bbox'>
            /// Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box
            /// (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='centre'>
            /// Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y)
            /// used to define a bounding circle that will limit the search area. This
            /// parameter must be specified together with 'maxDistance'. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#centre
            /// target='_blank'&gt;centre&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='extrapolate'>
            /// If true, uses supplied parcelPoint to derive an appropriate accessPoint.
            /// See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#extrapolate
            /// target="_blank"&gt;extrapolate&lt;/a&gt;
            /// </param>
            /// <param name='parcelPoint'>
            /// The coordinates of a point (x,y) known to be inside the parcel containing a
            /// given address. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#parcelPoint
            /// target="_blank"&gt;parcelPoint&lt;/a&gt;
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse OccupantsWithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string addressString = default(string), string tags = default(string), string locationDescriptor = default(string), int? maxResults = 1, string interpolation = default(string), bool? echo = false, bool? brief = false, bool? autoComplete = false, int? setBack = 0, int? outputSRS = 4326, int? minScore = 1, string matchPrecision = "OCCUPANT", string matchPrecisionNot = default(string), string siteName = default(string), string unitDesignator = default(string), string unitNumber = default(string), string unitNumberSuffix = default(string), string civicNumber = default(string), string civicNumberSuffix = default(string), string streetName = default(string), string streetType = default(string), string streetDirection = default(string), string streetQualifier = default(string), string localityName = default(string), string provinceCode = "BC", string localities = default(string), string notLocalities = default(string), string bbox = default(string), string centre = default(string), double? maxDistance = default(double?), bool? extrapolate = default(bool?), string parcelPoint = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.OccupantsWithHttpMessagesAsync(outputFormat, addressString, tags, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find the site nearest to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the site nearest a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// Centre point of search. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#point
            /// target="_blank"&gt;point&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            public static void Sites1(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false)
            {
                operations.Sites1Async(outputFormat, point, maxDistance, outputSRS, locationDescriptor, setBack, brief, excludeUnits, onlyCivic).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find the site nearest to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the site nearest a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// Centre point of search. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#point
            /// target="_blank"&gt;point&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Sites1Async(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Sites1WithHttpMessagesAsync(outputFormat, point, maxDistance, outputSRS, locationDescriptor, setBack, brief, excludeUnits, onlyCivic, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find the site nearest to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the site nearest a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// Centre point of search. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#point
            /// target="_blank"&gt;point&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Sites1WithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Sites1WithHttpMessagesAsync(outputFormat, point, maxDistance, outputSRS, locationDescriptor, setBack, brief, excludeUnits, onlyCivic, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find occupants of the site nearest to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the closest occupant to a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            public static void Occupants1(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), string tags = default(string), int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0)
            {
                operations.Occupants1Async(outputFormat, point, maxDistance, tags, outputSRS, locationDescriptor, brief, setBack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find occupants of the site nearest to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the closest occupant to a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Occupants1Async(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), string tags = default(string), int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Occupants1WithHttpMessagesAsync(outputFormat, point, maxDistance, tags, outputSRS, locationDescriptor, brief, setBack, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find occupants of the site nearest to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the closest occupant to a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Occupants1WithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), string tags = default(string), int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Occupants1WithHttpMessagesAsync(outputFormat, point, maxDistance, tags, outputSRS, locationDescriptor, brief, setBack, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find nearest intersection to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the closest intersection to a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// Example: -122.377,50.121  The point (x,y) from which the nearest site will
            /// be identified. The coordinates must be specified in the same SRS as given
            /// by the 'outputSRS' parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            public static void Intersections(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, int? minDegree = 2, int? maxDegree = 100)
            {
                operations.IntersectionsAsync(outputFormat, point, maxDistance, outputSRS, minDegree, maxDegree).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find nearest intersection to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the closest intersection to a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// Example: -122.377,50.121  The point (x,y) from which the nearest site will
            /// be identified. The coordinates must be specified in the same SRS as given
            /// by the 'outputSRS' parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task IntersectionsAsync(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, int? minDegree = 2, int? maxDegree = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.IntersectionsWithHttpMessagesAsync(outputFormat, point, maxDistance, outputSRS, minDegree, maxDegree, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find nearest intersection to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents the closest intersection to a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// Example: -122.377,50.121  The point (x,y) from which the nearest site will
            /// be identified. The coordinates must be specified in the same SRS as given
            /// by the 'outputSRS' parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse IntersectionsWithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, int? minDegree = 2, int? maxDegree = 100, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.IntersectionsWithHttpMessagesAsync(outputFormat, point, maxDistance, outputSRS, minDegree, maxDegree, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find sites near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents sites near a given point in the order of closest to farthest
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearby sites will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            public static void Sites2(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false)
            {
                operations.Sites2Async(outputFormat, point, maxDistance, outputSRS, maxResults, locationDescriptor, setBack, brief, excludeUnits, onlyCivic).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find sites near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents sites near a given point in the order of closest to farthest
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearby sites will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Sites2Async(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Sites2WithHttpMessagesAsync(outputFormat, point, maxDistance, outputSRS, maxResults, locationDescriptor, setBack, brief, excludeUnits, onlyCivic, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find sites near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents sites near a given point in the order of closest to farthest
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearby sites will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Sites2WithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string point, int? maxDistance = default(int?), int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Sites2WithHttpMessagesAsync(outputFormat, point, maxDistance, outputSRS, maxResults, locationDescriptor, setBack, brief, excludeUnits, onlyCivic, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find occupants of sites near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents occupants near a given point in order of closest to farthest
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            public static void Occupants2(this IGeoCoderAPI operations, string outputFormat, string point, string tags = default(string), int? maxDistance = default(int?), int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0)
            {
                operations.Occupants2Async(outputFormat, point, tags, maxDistance, outputSRS, maxResults, locationDescriptor, brief, setBack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find occupants of sites near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents occupants near a given point in order of closest to farthest
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Occupants2Async(this IGeoCoderAPI operations, string outputFormat, string point, string tags = default(string), int? maxDistance = default(int?), int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Occupants2WithHttpMessagesAsync(outputFormat, point, tags, maxDistance, outputSRS, maxResults, locationDescriptor, brief, setBack, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find occupants of sites near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents occupants near a given point in order of closest to farthest
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Occupants2WithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string point, string tags = default(string), int? maxDistance = default(int?), int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Occupants2WithHttpMessagesAsync(outputFormat, point, tags, maxDistance, outputSRS, maxResults, locationDescriptor, brief, setBack, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find intersections near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents intersections near a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            public static void Intersections1(this IGeoCoderAPI operations, string outputFormat, string point, int outputSRS, int? maxDistance = default(int?), int? maxResults = 1, int? minDegree = 2, int? maxDegree = 100)
            {
                operations.Intersections1Async(outputFormat, point, outputSRS, maxDistance, maxResults, minDegree, maxDegree).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find intersections near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents intersections near a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Intersections1Async(this IGeoCoderAPI operations, string outputFormat, string point, int outputSRS, int? maxDistance = default(int?), int? maxResults = 1, int? minDegree = 2, int? maxDegree = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Intersections1WithHttpMessagesAsync(outputFormat, point, outputSRS, maxDistance, maxResults, minDegree, maxDegree, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find intersections near to a geographic point
            /// </summary>
            /// <remarks>
            /// Represents intersections near a given point
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='point'>
            /// The point (x,y) from which the nearest site will be identified. The
            /// coordinates must be specified in the same SRS as given by the 'outputSRS'
            /// parameter.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxDistance'>
            /// The maximum distance (in metres) to search from the given point.  If not
            /// specified, the search distance is unlimited.
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Intersections1WithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string point, int outputSRS, int? maxDistance = default(int?), int? maxResults = 1, int? minDegree = 2, int? maxDegree = 100, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Intersections1WithHttpMessagesAsync(outputFormat, point, outputSRS, maxDistance, maxResults, minDegree, maxDegree, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find sites in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents sites within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            public static void Sites3(this IGeoCoderAPI operations, string outputFormat, string bbox, int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false)
            {
                operations.Sites3Async(outputFormat, bbox, outputSRS, maxResults, locationDescriptor, setBack, brief, excludeUnits, onlyCivic).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find sites in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents sites within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Sites3Async(this IGeoCoderAPI operations, string outputFormat, string bbox, int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Sites3WithHttpMessagesAsync(outputFormat, bbox, outputSRS, maxResults, locationDescriptor, setBack, brief, excludeUnits, onlyCivic, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find sites in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents sites within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='excludeUnits'>
            /// If true, excludes sites that are units of a parent site
            /// </param>
            /// <param name='onlyCivic'>
            /// If true, excludes sites without a civic address
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Sites3WithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string bbox, int? outputSRS = 4326, int? maxResults = 1, string locationDescriptor = default(string), int? setBack = 0, bool? brief = false, bool? excludeUnits = false, bool? onlyCivic = false, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Sites3WithHttpMessagesAsync(outputFormat, bbox, outputSRS, maxResults, locationDescriptor, setBack, brief, excludeUnits, onlyCivic, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find occupants of sites in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents all occupants within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            public static void Occupants3(this IGeoCoderAPI operations, string outputFormat, string bbox, string tags = default(string), int? outputSRS = 4326, int? maxResults = 200, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0)
            {
                operations.Occupants3Async(outputFormat, bbox, tags, outputSRS, maxResults, locationDescriptor, brief, setBack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find occupants of sites in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents all occupants within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Occupants3Async(this IGeoCoderAPI operations, string outputFormat, string bbox, string tags = default(string), int? outputSRS = 4326, int? maxResults = 200, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Occupants3WithHttpMessagesAsync(outputFormat, bbox, tags, outputSRS, maxResults, locationDescriptor, brief, setBack, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find occupants of sites in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents all occupants within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='tags'>
            /// Example: schools;courts;employment&lt;br&gt;A list of tags separated by
            /// semicolons.
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results to return.
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Occupants3WithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string bbox, string tags = default(string), int? outputSRS = 4326, int? maxResults = 200, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Occupants3WithHttpMessagesAsync(outputFormat, bbox, tags, outputSRS, maxResults, locationDescriptor, brief, setBack, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find intersections in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents all intersections within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormattarget="_blank"&gt;outputFormat&lt;/a&gt;.
            /// Possible values include: 'json', 'geojson', 'xhtml', 'kml', 'gml', 'csv',
            /// 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            public static void Intersections2(this IGeoCoderAPI operations, string outputFormat, string bbox, int? outputSRS = 4326, int? maxResults = 200, int? minDegree = 2, int? maxDegree = 100)
            {
                operations.Intersections2Async(outputFormat, bbox, outputSRS, maxResults, minDegree, maxDegree).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find intersections in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents all intersections within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormattarget="_blank"&gt;outputFormat&lt;/a&gt;.
            /// Possible values include: 'json', 'geojson', 'xhtml', 'kml', 'gml', 'csv',
            /// 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Intersections2Async(this IGeoCoderAPI operations, string outputFormat, string bbox, int? outputSRS = 4326, int? maxResults = 200, int? minDegree = 2, int? maxDegree = 100, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Intersections2WithHttpMessagesAsync(outputFormat, bbox, outputSRS, maxResults, minDegree, maxDegree, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find intersections in a geographic area
            /// </summary>
            /// <remarks>
            /// Represents all intersections within a given area
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormattarget="_blank"&gt;outputFormat&lt;/a&gt;.
            /// Possible values include: 'json', 'geojson', 'xhtml', 'kml', 'gml', 'csv',
            /// 'shpz'
            /// </param>
            /// <param name='bbox'>
            /// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See
            /// &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#bbox
            /// target="_blank"&gt;bbox&lt;/a&gt;
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='maxResults'>
            /// The maximum number of search results
            /// </param>
            /// <param name='minDegree'>
            /// The minimum degree an intersection can have to be included in results. A
            /// dead-end has a degree of 1.
            /// </param>
            /// <param name='maxDegree'>
            /// The maximum degree an interesection can have to be included in results. A
            /// four-way stop has a degree of 4.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Intersections2WithHttpMessages(this IGeoCoderAPI operations, string outputFormat, string bbox, int? outputSRS = 4326, int? maxResults = 200, int? minDegree = 2, int? maxDegree = 100, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Intersections2WithHttpMessagesAsync(outputFormat, bbox, outputSRS, maxResults, minDegree, maxDegree, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Represents all subsites of a given site
            /// </summary>
            /// <remarks>
            /// Represents all subsites of a given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            public static void Sites4(this IGeoCoderAPI operations, string siteID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0)
            {
                operations.Sites4Async(siteID, outputFormat, outputSRS, locationDescriptor, brief, setBack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Represents all subsites of a given site
            /// </summary>
            /// <remarks>
            /// Represents all subsites of a given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Sites4Async(this IGeoCoderAPI operations, string siteID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Sites4WithHttpMessagesAsync(siteID, outputFormat, outputSRS, locationDescriptor, brief, setBack, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Represents all subsites of a given site
            /// </summary>
            /// <remarks>
            /// Represents all subsites of a given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Sites4WithHttpMessages(this IGeoCoderAPI operations, string siteID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Sites4WithHttpMessagesAsync(siteID, outputFormat, outputSRS, locationDescriptor, brief, setBack, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a site by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents an individual site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            public static void Sites5(this IGeoCoderAPI operations, string siteID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0)
            {
                operations.Sites5Async(siteID, outputFormat, outputSRS, locationDescriptor, brief, setBack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a site by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents an individual site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Sites5Async(this IGeoCoderAPI operations, string siteID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Sites5WithHttpMessagesAsync(siteID, outputFormat, outputSRS, locationDescriptor, brief, setBack, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a site by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents an individual site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Sites5WithHttpMessages(this IGeoCoderAPI operations, string siteID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Sites5WithHttpMessagesAsync(siteID, outputFormat, outputSRS, locationDescriptor, brief, setBack, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an occupant (of a site) by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents an individual occupant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='occupantID'>
            /// Occupant identifier
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            public static void Occupants4(this IGeoCoderAPI operations, string occupantID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0)
            {
                operations.Occupants4Async(occupantID, outputFormat, outputSRS, locationDescriptor, brief, setBack).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an occupant (of a site) by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents an individual occupant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='occupantID'>
            /// Occupant identifier
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Occupants4Async(this IGeoCoderAPI operations, string occupantID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Occupants4WithHttpMessagesAsync(occupantID, outputFormat, outputSRS, locationDescriptor, brief, setBack, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get an occupant (of a site) by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents an individual occupant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='occupantID'>
            /// Occupant identifier
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgovapi-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='locationDescriptor'>
            /// Describes the nature of the address location. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor
            /// target="_blank"&gt;locationDescriptor&lt;/a&gt;. Possible values include:
            /// 'any', 'accessPoint', 'frontDoorPoint', 'parcelPoint', 'rooftopPoint',
            /// 'routingPoint'
            /// </param>
            /// <param name='brief'>
            /// If true, include only basic match and address details in results. Not
            /// supported for shp, csv, and gml formats.
            /// </param>
            /// <param name='setBack'>
            /// The distance to move the accessPoint away from the curb and towards the
            /// inside of the parcel (in metres). Ignored if locationDescriptor not set to
            /// accessPoint.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Occupants4WithHttpMessages(this IGeoCoderAPI operations, string occupantID, string outputFormat, int? outputSRS = 4326, string locationDescriptor = default(string), bool? brief = false, int? setBack = 0, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Occupants4WithHttpMessagesAsync(occupantID, outputFormat, outputSRS, locationDescriptor, brief, setBack, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a comma-separated string of all pids for a given site
            /// </summary>
            /// <remarks>
            /// Represents all parcel identifiers associated with an individual site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            public static void Parcels(this IGeoCoderAPI operations, string siteID, string outputFormat)
            {
                operations.ParcelsAsync(siteID, outputFormat).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a comma-separated string of all pids for a given site
            /// </summary>
            /// <remarks>
            /// Represents all parcel identifiers associated with an individual site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParcelsAsync(this IGeoCoderAPI operations, string siteID, string outputFormat, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParcelsWithHttpMessagesAsync(siteID, outputFormat, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a comma-separated string of all pids for a given site
            /// </summary>
            /// <remarks>
            /// Represents all parcel identifiers associated with an individual site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteID'>
            /// A unique, but not immutable, site identifier.
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse ParcelsWithHttpMessages(this IGeoCoderAPI operations, string siteID, string outputFormat, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.ParcelsWithHttpMessagesAsync(siteID, outputFormat, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an intersection by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents a individual intersection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='intersectionID'>
            /// A unique intersection identifier
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            public static void Intersections3(this IGeoCoderAPI operations, string intersectionID, string outputFormat, int? outputSRS = 4326)
            {
                operations.Intersections3Async(intersectionID, outputFormat, outputSRS).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an intersection by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents a individual intersection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='intersectionID'>
            /// A unique intersection identifier
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Intersections3Async(this IGeoCoderAPI operations, string intersectionID, string outputFormat, int? outputSRS = 4326, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Intersections3WithHttpMessagesAsync(intersectionID, outputFormat, outputSRS, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get an intersection by its unique ID
            /// </summary>
            /// <remarks>
            /// Represents a individual intersection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='intersectionID'>
            /// A unique intersection identifier
            /// </param>
            /// <param name='outputFormat'>
            /// Results format. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat
            /// target="_blank"&gt;outputFormat&lt;/a&gt;. Possible values include: 'json',
            /// 'geojson', 'xhtml', 'kml', 'gml', 'csv', 'shpz'
            /// </param>
            /// <param name='outputSRS'>
            /// The EPSG code of the spatial reference system (SRS) to use for output
            /// geometries. See &lt;a
            /// href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS
            /// target="_blank"&gt;outputSRS&lt;/a&gt;
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse Intersections3WithHttpMessages(this IGeoCoderAPI operations, string intersectionID, string outputFormat, int? outputSRS = 4326, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.Intersections3WithHttpMessagesAsync(intersectionID, outputFormat, outputSRS, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
